//Copyright 2019 Volodymyr Podshyvalov
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

using System;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Reflection;
using UniformDataOperator.Sql.Tables.Attributes;

namespace UniformDataOperator.Sql
{
    /// <summary>
    /// Implement that interface to provide possiblity to controll your data base by using SQL queries.
    /// </summary>
    public interface ISqlOperator
    {
        /// <summary>
        /// Return new clear command suitable for current DB.
        /// </summary>
        DbCommand NewCommand { get; }

        /// <summary>
        /// Server's ip.
        /// </summary>
        string Server { get; set; }

        /// <summary>
        /// Port for server access.
        /// </summary>
        int Port { get; set; }

        /// <summary>
        /// Database's name.
        /// </summary>
        string Database { get; set; }

        /// <summary>
        /// User for connection.
        /// </summary>
        string UserId { get; set; }

        /// <summary>
        /// User's password.
        /// </summary>
        string Password { get; set; }

        /// <summary>
        /// Connection to DB.
        /// </summary>
        DbConnection Connection { get; }

        /// <summary>
        /// Initialize operator.
        /// </summary>
        void Initialize();

        /// <summary>
        /// Opening connection to SQL server.
        /// </summary>
        /// <param name="error">Faced error. Null if passed success.</param>
        /// <returns>Result of connection.</returns>
        bool OpenConnection(out string error);

        /// <summary>
        /// Closing connection to SQL server.
        /// </summary>
        /// <returns>Result of connection closing.</returns>
        bool CloseConnection();

        /// <summary>
        /// Sending SQL query to server.
        /// </summary>
        /// <param name="query"></param>
        void ExecuteNonQuery(string query);

        /// <summary>
        /// Serching for first entry suitable to query and return as result.
        /// </summary>
        /// <param name="query"></param>
        /// <returns>Recived data.</returns>
        object ExecuteScalar(string query);

        /// <summary>
        /// Execute complex data reader.
        /// </summary>
        /// <param name="query">SQL query that would be shared to server.</param>
        /// <returns>Data reader with recived data.</returns>
        DbDataReader ExecuteReader(string query);
        
        /// <summary>
        /// Try to return count by query.
        /// </summary>
        /// <param name="query">SQL query that would send to server.</param>
        /// <returns>Count. -1 if not found.</returns>
        int Count(string query);

        /// <summary>
        /// Backuping data base to sql file in directory.
        /// Name would be generated by timestamp.
        /// </summary>
        /// <param name="directory">Directory that would store the backup file.</param>
        void Backup(string directory);

        /// <summary>
        /// Restoring SQL db from file.
        /// </summary>
        /// <param name="filePath">Full path to file</param>
        void Restore(string filePath);

        /// <summary>
        /// Convert value of member to data base parameter that can be used in command.
        /// </summary>
        /// <param name="data">Value of the object that would applied to parameter.</param>
        /// <param name="column">Column attribute relative to member of data.</param>
        /// <returns>Parameter that could by used in commands to data base.</returns>
        DbParameter MemberToParameter(object data, Tables.Attributes.Column column);

        /// <summary>
        /// Add code that disabling SQL checks during executing command.
        /// </summary>
        /// <param name="command">Target command that would be modified during operation.</param>
        /// <returns>Modified comand.</returns>
        DbCommand DisableSqlChecks(DbCommand command);

        /// <summary>
        /// Add code that disabling SQL checks during executing command.
        /// </summary>
        /// <param name="command">Target command that would be modified during operation.</param>
        /// <returns>Modified comand.</returns>
        string DisableSqlChecks(string command);

        /// <summary>
        /// Trying to set schema to databases server in case if shema not exist.
        /// </summary>
        /// <param name="schemaName">Name of the schema that would be used\created.</param>
        /// <param name="error">Error faces during operation.</param>
        /// <returns></returns>
        bool ActivateSchema(string schemaName, out string error);

        /// <summary>
        /// Validate data base table column acording to member attributes.
        /// </summary>
        /// <param name="tableDescriptor">Table meta data.</param>
        /// <param name="columnMember">Member with defined Column attribute that would be comared with </param>
        /// <returns>Result of validation.</returns>
        bool ValidateTableMember(Table tableDescriptor, MemberInfo columnMember);

        /// <summary>
        /// Creating request that setting up data from object to data base server acording to attributes.
        /// </summary>
        /// <typeparam name="T">Type that has defined Table attribute. 
        /// Would be used as table descriptor during queri building.</typeparam>
        /// <param name="data">Object that contains fields that would be writed to data base. 
        /// Affected only fields and properties with defined Column attribute.</param>
        /// <param name="error">Error faces during operation.</param>
        /// <returns>Result of operation.</returns>
        bool SetToTable<T>(object data, out string error);

        /// <summary>
        /// Creating request that setting up data from object to data base server acording to attributes.
        /// </summary>
        /// <typeparam name="T">Type that has defined Table attribute. 
        /// <param name="cancellationToken">Token that can terminate operation.</param>
        /// Would be used as table descriptor during queri building.</typeparam>
        /// <param name="data">Object that contains fields that would be writed to data base. 
        /// Affected only fields and properties with defined Column attribute.</param>
        void SetToTableAsync<T>(CancellationToken cancellationToken, object data);

        /// <summary>
        /// Setting data from DB Data reader to object by using column map described at object Type.
        /// Auto-generate SQL query and request coluns data relative to privary keys described in object.
        /// </summary>
        /// <typeparam name="T">Type that has defined Table attribute. 
        /// <param name="obj">Target object that cantains described primary keys, 
        /// that would be used during query generation.</param>
        /// <param name="error">Error faces during operation.</param>
        /// <param name="columns">List of requested columns that would included to SQL query.</param>
        /// <returns>Result of operation.</returns>
        bool SetToObject<T>(object obj, out string error, params string[] columns);

        /// <summary>
        /// Setting data from DB Data reader to object by using column map described at object Type.
        /// Auto-generate SQL query and request coluns data relative to privary keys described in object.
        /// </summary>
        /// <typeparam name="T">Type that has defined Table attribute. 
        /// <param name="cancellationToken">Token that can terminate operation.</param>
        /// Would be used as table descriptor during queri building.</typeparam>
        /// <param name="obj">Target object that cantains described primary keys, 
        /// that would be used during query generation.</param>
        /// <param name="columns">List of requested columns that would included to SQL query.</param>
        void SetToObjectAsync<T>(CancellationToken cancellationToken, object obj, params string[] columns);

        /// <summary>
        /// Trying to convert DBType to specified type in string format that suitable to this database.
        /// </summary>
        /// <param name="type">Common DBType.</param>
        /// <returns>Type suitable for SQL command relative to this type of data base. 
        /// InvalidCastException in case if converting not possible.</returns>
        string DbTypeToString(DbType type);

        /// <summary>
        /// Return generated SQL command relative to init time.
        /// </summary>
        /// <param name="member">Member that contains defined attributes that describes column definition.</param>
        /// <returns>SQL command relative to target server.</returns>
        string ColumnDeclarationCommand(MemberInfo member);
    }
}
