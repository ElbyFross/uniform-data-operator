//Copyright 2019 Volodymyr Podshyvalov
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

using System.Data.Common;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UniformDataOperator.SQL
{
    /// <summary>
    /// Implement that interface to provide possiblity to controll your data base by using SQL queries.
    /// </summary>
    public interface ISQLOperator
    {
        /// <summary>
        /// Server's ip.
        /// </summary>
        string Server { get; set; }

        /// <summary>
        /// Database's name.
        /// </summary>
        string Database { get; set; }

        /// <summary>
        /// User for connection.
        /// </summary>
        string UserId { get; set; }

        /// <summary>
        /// User's password.
        /// </summary>
        string Password { get; set; }

        /// <summary>
        /// Initialize operator.
        /// </summary>
        void Initialize();

        /// <summary>
        /// Opening connection to SQL server.
        /// </summary>
        /// <returns>Result of connection.</returns>
        bool OpenConnection();

        /// <summary>
        /// Closing connection to SQL server.
        /// </summary>
        /// <returns>Result of connection closing.</returns>
        bool CloseConnection();

        /// <summary>
        /// Sending SQL query to server.
        /// </summary>
        /// <param name="query"></param>
        void ExecuteNonQuery(string query);

        /// <summary>
        /// Serching for first entry suitable to query and return as result.
        /// </summary>
        /// <param name="query"></param>
        /// <returns>Recived data.</returns>
        object ExecuteScalar(string query);

        /// <summary>
        /// Execute complex data reader.
        /// </summary>
        /// <param name="query">SQL query that would be shared to server.</param>
        /// <returns>Data reader with recived data.</returns>
        DbDataReader ExecuteReader(string query);
        
        /// <summary>
        /// Try to return count by query.
        /// </summary>
        /// <param name="query">SQL query that would send to server.</param>
        /// <returns>Count. -1 if not found.</returns>
        int Count(string query);

        /// <summary>
        /// Backuping data base to sql file in directory.
        /// Name would be generated by timestamp.
        /// </summary>
        /// <param name="directory">Directory that would store the backup file.</param>
        void Backup(string directory);

        /// <summary>
        /// Restoring SQL db from file.
        /// </summary>
        /// <param name="filePath">Full path to file</param>
        void Restore(string filePath);
    }
}
